//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.14 at 04:50:28 PM SGT 
//


package org.fixprotocol.fixml_5_0_sp2;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * ListStrikePrice can be found in Volume 4 of the
 * 						specification
 * 
 * <p>Java class for ListStrikePrice_message_t complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ListStrikePrice_message_t"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.fixprotocol.org/FIXML-5-0-SP2}Abstract_message_t"&gt;
 *       &lt;sequence&gt;
 *         &lt;group ref="{http://www.fixprotocol.org/FIXML-5-0-SP2}ListStrikePriceElements"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.fixprotocol.org/FIXML-5-0-SP2}ListStrikePriceAttributes"/&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ListStrikePrice_message_t", propOrder = {
    "strkPX"
})
public class ListStrikePriceMessageT
    extends AbstractMessageT
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "StrkPX", required = true)
    protected List<InstrmtStrkPxGrpBlockT> strkPX;
    @XmlAttribute(name = "ID", required = true)
    protected String id;
    @XmlAttribute(name = "TotNoStrks", required = true)
    protected BigInteger totNoStrks;
    @XmlAttribute(name = "LastFragment")
    protected LastFragmentEnumT lastFragment;

    /**
     * Gets the value of the strkPX property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the strkPX property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getStrkPX().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link InstrmtStrkPxGrpBlockT }
     * 
     * 
     */
    public List<InstrmtStrkPxGrpBlockT> getStrkPX() {
        if (strkPX == null) {
            strkPX = new ArrayList<InstrmtStrkPxGrpBlockT>();
        }
        return this.strkPX;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getID() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setID(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the totNoStrks property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getTotNoStrks() {
        return totNoStrks;
    }

    /**
     * Sets the value of the totNoStrks property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setTotNoStrks(BigInteger value) {
        this.totNoStrks = value;
    }

    /**
     * Gets the value of the lastFragment property.
     * 
     * @return
     *     possible object is
     *     {@link LastFragmentEnumT }
     *     
     */
    public LastFragmentEnumT getLastFragment() {
        return lastFragment;
    }

    /**
     * Sets the value of the lastFragment property.
     * 
     * @param value
     *     allowed object is
     *     {@link LastFragmentEnumT }
     *     
     */
    public void setLastFragment(LastFragmentEnumT value) {
        this.lastFragment = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ListStrikePriceMessageT)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ListStrikePriceMessageT that = ((ListStrikePriceMessageT) object);
        {
            List<InstrmtStrkPxGrpBlockT> lhsStrkPX;
            lhsStrkPX = (((this.strkPX!= null)&&(!this.strkPX.isEmpty()))?this.getStrkPX():null);
            List<InstrmtStrkPxGrpBlockT> rhsStrkPX;
            rhsStrkPX = (((that.strkPX!= null)&&(!that.strkPX.isEmpty()))?that.getStrkPX():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "strkPX", lhsStrkPX), LocatorUtils.property(thatLocator, "strkPX", rhsStrkPX), lhsStrkPX, rhsStrkPX)) {
                return false;
            }
        }
        {
            String lhsID;
            lhsID = this.getID();
            String rhsID;
            rhsID = that.getID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsID), LocatorUtils.property(thatLocator, "id", rhsID), lhsID, rhsID)) {
                return false;
            }
        }
        {
            BigInteger lhsTotNoStrks;
            lhsTotNoStrks = this.getTotNoStrks();
            BigInteger rhsTotNoStrks;
            rhsTotNoStrks = that.getTotNoStrks();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totNoStrks", lhsTotNoStrks), LocatorUtils.property(thatLocator, "totNoStrks", rhsTotNoStrks), lhsTotNoStrks, rhsTotNoStrks)) {
                return false;
            }
        }
        {
            LastFragmentEnumT lhsLastFragment;
            lhsLastFragment = this.getLastFragment();
            LastFragmentEnumT rhsLastFragment;
            rhsLastFragment = that.getLastFragment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastFragment", lhsLastFragment), LocatorUtils.property(thatLocator, "lastFragment", rhsLastFragment), lhsLastFragment, rhsLastFragment)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<InstrmtStrkPxGrpBlockT> theStrkPX;
            theStrkPX = (((this.strkPX!= null)&&(!this.strkPX.isEmpty()))?this.getStrkPX():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "strkPX", theStrkPX), currentHashCode, theStrkPX);
        }
        {
            String theID;
            theID = this.getID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theID), currentHashCode, theID);
        }
        {
            BigInteger theTotNoStrks;
            theTotNoStrks = this.getTotNoStrks();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totNoStrks", theTotNoStrks), currentHashCode, theTotNoStrks);
        }
        {
            LastFragmentEnumT theLastFragment;
            theLastFragment = this.getLastFragment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastFragment", theLastFragment), currentHashCode, theLastFragment);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<InstrmtStrkPxGrpBlockT> theStrkPX;
            theStrkPX = (((this.strkPX!= null)&&(!this.strkPX.isEmpty()))?this.getStrkPX():null);
            strategy.appendField(locator, this, "strkPX", buffer, theStrkPX);
        }
        {
            String theID;
            theID = this.getID();
            strategy.appendField(locator, this, "id", buffer, theID);
        }
        {
            BigInteger theTotNoStrks;
            theTotNoStrks = this.getTotNoStrks();
            strategy.appendField(locator, this, "totNoStrks", buffer, theTotNoStrks);
        }
        {
            LastFragmentEnumT theLastFragment;
            theLastFragment = this.getLastFragment();
            strategy.appendField(locator, this, "lastFragment", buffer, theLastFragment);
        }
        return buffer;
    }

}
