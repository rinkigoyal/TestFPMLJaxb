//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.17 at 02:08:33 AM SGT 
//


package org.fixprotocol.fixml_5_0_sp2;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for StrikeRules_Block_t complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="StrikeRules_Block_t"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;group ref="{http://www.fixprotocol.org/FIXML-5-0-SP2}StrikeRulesElements"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.fixprotocol.org/FIXML-5-0-SP2}StrikeRulesAttributes"/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StrikeRules_Block_t", propOrder = {
    "matRules"
})
public class StrikeRulesBlockT
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "MatRules")
    protected List<MaturityRulesBlockT> matRules;
    @XmlAttribute(name = "StrkRule")
    protected String strkRule;
    @XmlAttribute(name = "StartStrkPxRng")
    protected BigDecimal startStrkPxRng;
    @XmlAttribute(name = "EndStrkPxRng")
    protected BigDecimal endStrkPxRng;
    @XmlAttribute(name = "StrkIncr")
    protected BigDecimal strkIncr;
    @XmlAttribute(name = "StrkExrStyle")
    protected BigInteger strkExrStyle;

    /**
     * Gets the value of the matRules property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the matRules property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMatRules().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MaturityRulesBlockT }
     * 
     * 
     */
    public List<MaturityRulesBlockT> getMatRules() {
        if (matRules == null) {
            matRules = new ArrayList<MaturityRulesBlockT>();
        }
        return this.matRules;
    }

    /**
     * Gets the value of the strkRule property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getStrkRule() {
        return strkRule;
    }

    /**
     * Sets the value of the strkRule property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setStrkRule(String value) {
        this.strkRule = value;
    }

    /**
     * Gets the value of the startStrkPxRng property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getStartStrkPxRng() {
        return startStrkPxRng;
    }

    /**
     * Sets the value of the startStrkPxRng property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setStartStrkPxRng(BigDecimal value) {
        this.startStrkPxRng = value;
    }

    /**
     * Gets the value of the endStrkPxRng property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getEndStrkPxRng() {
        return endStrkPxRng;
    }

    /**
     * Sets the value of the endStrkPxRng property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setEndStrkPxRng(BigDecimal value) {
        this.endStrkPxRng = value;
    }

    /**
     * Gets the value of the strkIncr property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getStrkIncr() {
        return strkIncr;
    }

    /**
     * Sets the value of the strkIncr property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setStrkIncr(BigDecimal value) {
        this.strkIncr = value;
    }

    /**
     * Gets the value of the strkExrStyle property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getStrkExrStyle() {
        return strkExrStyle;
    }

    /**
     * Sets the value of the strkExrStyle property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setStrkExrStyle(BigInteger value) {
        this.strkExrStyle = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof StrikeRulesBlockT)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final StrikeRulesBlockT that = ((StrikeRulesBlockT) object);
        {
            List<MaturityRulesBlockT> lhsMatRules;
            lhsMatRules = (((this.matRules!= null)&&(!this.matRules.isEmpty()))?this.getMatRules():null);
            List<MaturityRulesBlockT> rhsMatRules;
            rhsMatRules = (((that.matRules!= null)&&(!that.matRules.isEmpty()))?that.getMatRules():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "matRules", lhsMatRules), LocatorUtils.property(thatLocator, "matRules", rhsMatRules), lhsMatRules, rhsMatRules)) {
                return false;
            }
        }
        {
            String lhsStrkRule;
            lhsStrkRule = this.getStrkRule();
            String rhsStrkRule;
            rhsStrkRule = that.getStrkRule();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "strkRule", lhsStrkRule), LocatorUtils.property(thatLocator, "strkRule", rhsStrkRule), lhsStrkRule, rhsStrkRule)) {
                return false;
            }
        }
        {
            BigDecimal lhsStartStrkPxRng;
            lhsStartStrkPxRng = this.getStartStrkPxRng();
            BigDecimal rhsStartStrkPxRng;
            rhsStartStrkPxRng = that.getStartStrkPxRng();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "startStrkPxRng", lhsStartStrkPxRng), LocatorUtils.property(thatLocator, "startStrkPxRng", rhsStartStrkPxRng), lhsStartStrkPxRng, rhsStartStrkPxRng)) {
                return false;
            }
        }
        {
            BigDecimal lhsEndStrkPxRng;
            lhsEndStrkPxRng = this.getEndStrkPxRng();
            BigDecimal rhsEndStrkPxRng;
            rhsEndStrkPxRng = that.getEndStrkPxRng();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endStrkPxRng", lhsEndStrkPxRng), LocatorUtils.property(thatLocator, "endStrkPxRng", rhsEndStrkPxRng), lhsEndStrkPxRng, rhsEndStrkPxRng)) {
                return false;
            }
        }
        {
            BigDecimal lhsStrkIncr;
            lhsStrkIncr = this.getStrkIncr();
            BigDecimal rhsStrkIncr;
            rhsStrkIncr = that.getStrkIncr();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "strkIncr", lhsStrkIncr), LocatorUtils.property(thatLocator, "strkIncr", rhsStrkIncr), lhsStrkIncr, rhsStrkIncr)) {
                return false;
            }
        }
        {
            BigInteger lhsStrkExrStyle;
            lhsStrkExrStyle = this.getStrkExrStyle();
            BigInteger rhsStrkExrStyle;
            rhsStrkExrStyle = that.getStrkExrStyle();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "strkExrStyle", lhsStrkExrStyle), LocatorUtils.property(thatLocator, "strkExrStyle", rhsStrkExrStyle), lhsStrkExrStyle, rhsStrkExrStyle)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<MaturityRulesBlockT> theMatRules;
            theMatRules = (((this.matRules!= null)&&(!this.matRules.isEmpty()))?this.getMatRules():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "matRules", theMatRules), currentHashCode, theMatRules);
        }
        {
            String theStrkRule;
            theStrkRule = this.getStrkRule();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "strkRule", theStrkRule), currentHashCode, theStrkRule);
        }
        {
            BigDecimal theStartStrkPxRng;
            theStartStrkPxRng = this.getStartStrkPxRng();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "startStrkPxRng", theStartStrkPxRng), currentHashCode, theStartStrkPxRng);
        }
        {
            BigDecimal theEndStrkPxRng;
            theEndStrkPxRng = this.getEndStrkPxRng();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endStrkPxRng", theEndStrkPxRng), currentHashCode, theEndStrkPxRng);
        }
        {
            BigDecimal theStrkIncr;
            theStrkIncr = this.getStrkIncr();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "strkIncr", theStrkIncr), currentHashCode, theStrkIncr);
        }
        {
            BigInteger theStrkExrStyle;
            theStrkExrStyle = this.getStrkExrStyle();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "strkExrStyle", theStrkExrStyle), currentHashCode, theStrkExrStyle);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<MaturityRulesBlockT> theMatRules;
            theMatRules = (((this.matRules!= null)&&(!this.matRules.isEmpty()))?this.getMatRules():null);
            strategy.appendField(locator, this, "matRules", buffer, theMatRules);
        }
        {
            String theStrkRule;
            theStrkRule = this.getStrkRule();
            strategy.appendField(locator, this, "strkRule", buffer, theStrkRule);
        }
        {
            BigDecimal theStartStrkPxRng;
            theStartStrkPxRng = this.getStartStrkPxRng();
            strategy.appendField(locator, this, "startStrkPxRng", buffer, theStartStrkPxRng);
        }
        {
            BigDecimal theEndStrkPxRng;
            theEndStrkPxRng = this.getEndStrkPxRng();
            strategy.appendField(locator, this, "endStrkPxRng", buffer, theEndStrkPxRng);
        }
        {
            BigDecimal theStrkIncr;
            theStrkIncr = this.getStrkIncr();
            strategy.appendField(locator, this, "strkIncr", buffer, theStrkIncr);
        }
        {
            BigInteger theStrkExrStyle;
            theStrkExrStyle = this.getStrkExrStyle();
            strategy.appendField(locator, this, "strkExrStyle", buffer, theStrkExrStyle);
        }
        return buffer;
    }

}
